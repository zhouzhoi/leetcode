class Solution {
    /**回溯思路 */
    LinkedList<Integer> res = new LinkedList<>();
    //定义：输入一个节点，返回以该节点为跟的二叉树的前序遍历结果
    public List<Integer> preorderTraversal(TreeNode root) {
        traverse(root);
        return res;
    }
    //二叉树遍历函数
    void traverse(TreeNode root){
        if(root == null){
            return;
        }
        //前序遍历位置
        res.add(root.val);
        traverse(root.left);
        traverse(root.right);
    }
}

class Solution {
    /**动态规划思路 */
    //定义：输入一个节点，返回以该节点为跟的二叉树的前序遍历结果
    public List<Integer> preorderTraversal(TreeNode root) {
        LinkedList<Integer> res = new LinkedList<>();
        if(root == null){
            return res;
        }
        //前序遍历结果的特点：第一个是根节点的值，接着是左右子树
        res.add(root.val);
        res.addAll(preorderTraversal(root.left));
        res.addAll(preorderTraversal(root.right));
        return res;
    }
}
