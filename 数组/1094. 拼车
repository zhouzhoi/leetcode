class Solution {
    public boolean carPooling(int[][] trips, int capacity) {
        //最多有1001个车站
        int[] nums = new int[1001];
        //构造差分解法
        Diffence diff = new Diffence(nums);

        for(int[] trip : trips){
            // 乘客数量
            int val = trip[0];
            // 第 trip[1] 站乘客上车
            int i = trip[1];
            // 第 trip[2] 站乘客已经下车，
            // 即乘客在车上的区间是 [trip[1], trip[2] - 1]
            int j = trip[2] - 1;
            // 进行区间操作
            diff.increment(i, j, val);
        }

        int[] res = diff.result();
        //不超载
        for (int i = 0; i < res.length; i++) {
        if (capacity < res[i]) {
            return false;
            }
        }
        return true;
    }
    //差分算法工具类
    class Diffence{
        //差分数组
        private int[] diff;

        /*输入一个初始数组，区间操作将在这个数组上进行 */
        public Diffence(int[] nums) {
            assert nums.length > 0;
            diff = new int[nums.length];
            //根据初始数组构造差分数组
            diff[0] = nums[0];
            for(int i = 1; i < nums.length; i++){
                diff[i] = nums[i] - nums[i - 1];
            }
        }
        /*给闭区间[i， j]增加val（可以是负数） */
        public void increment(int i, int j, int val){
            diff[i] += val;
            if(j + 1 < diff.length){
                diff[j + 1] -= val;
            }
        }
        /**返回结果数组*/
        public int[] result(){
            int[] res = new int[diff.length];
            //根据差分数组构造结果数组
            res[0] = diff[0];
            for(int i = 1; i < diff.length; i++){
                res[i] = res[i - 1] + diff[i];
            }
            return res;
        }
    }
}
